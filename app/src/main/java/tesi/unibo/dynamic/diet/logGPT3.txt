question = 
Given the following test class:
'
package tesi.unibo.dynamic;
import static tesi.unibo.dynamic.Diet.Nutrient.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DynamicTest {
private DietFactory factory;
        @BeforeEach
        public void initFactory() {
                this.factory = new DietFactoryImpl();
        }
        private void fillProducts(Diet diet) {
                diet.addFood("pasta", Map.of(CARBS,280,PROTEINS,70,FAT,50)); // 400 calories overall
                diet.addFood("riso", Map.of(CARBS,250,PROTEINS,70,FAT,30));  // 350 calories overall
                diet.addFood("pollo", Map.of(CARBS,10,PROTEINS,60,FAT,30));  // 100 calories overall
                diet.addFood("insalata", Map.of(CARBS,10,PROTEINS,3,FAT,2)); // 15 calories overall
                diet.addFood("broccoli", Map.of(CARBS,20,PROTEINS,10,FAT,5));// 35 calories overall
                diet.addFood("grana", Map.of(CARBS,0,PROTEINS,200,FAT,200)); // 400 calories overall
        }
        @Test
        public void testStandard() {
                var diet = this.factory.standard();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)),
                "calories is 1900"); // 800+300+800 calories
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",50.0))); // 800+300+200 calories: too low!!
                assertFalse(diet.isValid(Map.of("pasta",300.0,"pollo",300.0,"grana",200.0,"broccoli",300.0))); // 1200+300+800+105 calories: too much!!
        }
        @Test
        public void testLowCarb() {
                var diet = this.factory.lowCarb();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",1000.0)),
                "calories is 1000 and carbs is 100"); // ok calories, ok carbs
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too much!
                assertFalse(diet.isValid(Map.of("pasta",400.0))); // ok calories, but too much carbs
        }
        @Test
        public void testHighProtein() {
                var diet = this.factory.highProtein();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",2500.0)),
                "calories is 2500, carbs is 250, protein is 1500"); // ok calories, ok proteins
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too few!
                assertFalse(diet.isValid(Map.of("grana",500.0))); // ok calories, but too few proteins
        }
        @Test
        public void testBalanced() {
                var diet = this.factory.balanced();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta", 200.0, "pollo", 400.0, "grana", 100.0, "broccoli", 300.0))); // OK
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)));
                assertFalse(diet.isValid(Map.of("pollo",1000.0)));
                assertFalse(diet.isValid(Map.of("pollo",2000.0)));
        }

}
'
Given the following support class:
'
package tesi.unibo.dynamic;

import java.util.Map;

/**
 * Models a diet regime, essentially with a method 'isValid' to check
 * if a selection of food is compliant with this diet
 */
public interface Diet {

        /**
         * The three standard types of nutrients
         */
        enum Nutrient {
                CARBS, PROTEINS, FAT
        }

        /**
         * Add information about a new type of food ("pasta", "pollo", and so on)
         *
         * @param name is the unique name of the food
         * @param nutritionMap gives a map from a nutrient to how many calories it brings with 100 grams of food
         * (see method Test.fillProducts for its usage
         */
        void addFood(String name, Map<Nutrient,Integer> nutritionMap);

        /**
         * Given a selection of food for a day diet, it states if this is valid in current diet.
         * Note that if 100 grams of 'pasta' give 50 calories of FAT (according to nutritionMap above),
         * then 200 grams of pasta added in dietMap brings 100 calories.
         *
         * @param dietMap, gives how many grams of each food are selected
         * @return whether this selection of food is ok in this diet
         */
        boolean isValid(Map<String, Double> dietMap);

}

'
Given the following class to implement:
'
package tesi.unibo.dynamic;

public interface DietFactory {

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1500,2000]
         * - does not care about carbs
         * - does not care about protein
         * - does not care about fat
         */
        Diet standard();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1000,1500]
         * - carbs give overall <=300 calories
         * - does not care about protein
         * - does not care about fat
         */
        Diet lowCarb();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [2000,2500]
         * - carbs give overall <=300 calories
         * - proteins give overall >=1300 calories
         * - does not care about fat
         */
        Diet highProtein();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1600,2000]
         * - carbs give overall >=600 calories
         * - proteins give overall >=600 calories
         * - fat gives overall >=400 calories
         * - fat and proteins together give overall <=1100 calories
         */
        Diet balanced();
}

'
Given your previous implementation:
'
package tesi.unibo.dynamic;

import java.util.HashMap;
import java.util.Map;

public class DietFactoryImpl implements DietFactory {

        @Override
        public Diet standard() {
                return new DietImpl(1500, 2000, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet lowCarb() {
                return new DietImpl(1000, 1500, 0, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet highProtein() {
                return new DietImpl(2000, 2500, 1300, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet balanced() {
                return new DietImpl(1600, 2000, 600, Integer.MAX_VALUE, 600, Integer.MAX_VALUE, 400, Integer.MAX_VALUE, 400, 700);
        }

        private static class DietImpl implements Diet {
                private Map<String, Map<Nutrient, Integer>> foods;
                private int minCalories;
                private int maxCalories;
                private int minCarbs;
                private int maxCarbs;
                private int minProteins;
                private int maxProteins;
                private int minFat;
                private int maxFat;
                private int maxProteinsAndFat;

                public DietImpl(int minCalories, int maxCalories, int minCarbs, int maxCarbs,
                                                int minProteins, int maxProteins, int minFat, int maxFat,
                                                int minProteinsAndFat, int maxProteinsAndFat) {
                        this.foods = new HashMap<>();
                        this.minCalories = minCalories;
                        this.maxCalories = maxCalories;
                        this.minCarbs = minCarbs;
                        this.maxCarbs = maxCarbs;
                        this.minProteins = minProteins;
                        this.maxProteins = maxProteins;
                        this.minFat = minFat;
                        this.maxFat = maxFat;
                        this.maxProteinsAndFat = maxProteinsAndFat;
                }

                @Override
                public void addFood(String name, Map<Nutrient, Integer> nutritionMap) {
                        foods.put(name, nutritionMap);
                }

                @Override
                public boolean isValid(Map<String, Double> dietMap) {
                        int calories = 0;
                        int carbs = 0;
                        int proteins = 0;
                        int fat = 0;
                        for (var entry : dietMap.entrySet()) {
                                String food = entry.getKey();
                                double grams = entry.getValue();
                                Map<Nutrient, Integer> nutritionMap = foods.get(food);
                                calories += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                carbs += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                proteins += grams / 100 * nutritionMap.get(Nutrient.PROTEINS);
                                fat += grams / 100 * nutritionMap.get(Nutrient.FAT);
                        }
                        if (calories < minCalories || calories > maxCalories) return false;
                        if (carbs < minCarbs || carbs > maxCarbs) return false;
                        if (proteins < minProteins || proteins > maxProteins) return false;
                        if (fat < minFat || fat > maxFat) return false;
                        if (proteins + fat > maxProteinsAndFat) return false;
                        return true;
                }
        }
}
'
Given the following tests failed by your previous implementation:
'
        - testStandard(): calories is 1900 ==> expected: <true> but was: <false>
        - testLowCarb(): calories is 1000 and carbs is 100 ==> expected: <true> but was: <false>
        - testHighProtein(): calories is 2500, carbs is 250, protein is 1500 ==> expected: <true> but was: <false>
        - testBalanced(): expected: <true> but was: <false>

'
I want you to generate a Java class named DietFactoryImpl that passes the provided tests.  The package for the class to be created is "tesi.unibo.dynamic". I WANT ONLY THE CODE, NO COMMENTS. I want runnable code with the information I've given you. I don't want examples, I just want it to work and pass the tests.
--------------------------------
response = 
package tesi.unibo.dynamic;

import java.util.HashMap;
import java.util.Map;

public class DietFactoryImpl implements DietFactory {

        @Override
        public Diet standard() {
                return new DietImpl(1500, 2000, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet lowCarb() {
                return new DietImpl(1000, 1500, 0, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet highProtein() {
                return new DietImpl(2000, 2500, 1300, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet balanced() {
                return new DietImpl(1600, 2000, 600, Integer.MAX_VALUE, 600, Integer.MAX_VALUE, 400, Integer.MAX_VALUE, 400, 1100);
        }

        private static class DietImpl implements Diet {
                private Map<String, Map<Nutrient, Integer>> foods;
                private int minCalories;
                private int maxCalories;
                private int minCarbs;
                private int maxCarbs;
                private int minProteins;
                private int maxProteins;
                private int minFat;
                private int maxFat;
                private int maxProteinsAndFat;

                public DietImpl(int minCalories, int maxCalories, int minCarbs, int maxCarbs,
                                                int minProteins, int maxProteins, int minFat, int maxFat,
                                                int minProteinsAndFat, int maxProteinsAndFat) {
                        this.foods = new HashMap<>();
                        this.minCalories = minCalories;
                        this.maxCalories = maxCalories;
                        this.minCarbs = minCarbs;
                        this.maxCarbs = maxCarbs;
                        this.minProteins = minProteins;
                        this.maxProteins = maxProteins;
                        this.minFat = minFat;
                        this.maxFat = maxFat;
                        this.maxProteinsAndFat = maxProteinsAndFat;
                }

                @Override
                public void addFood(String name, Map<Nutrient, Integer> nutritionMap) {
                        foods.put(name, nutritionMap);
                }

                @Override
                public boolean isValid(Map<String, Double> dietMap) {
                        int calories = 0;
                        int carbs = 0;
                        int proteins = 0;
                        int fat = 0;
                        for (var entry : dietMap.entrySet()) {
                                String food = entry.getKey();
                                double grams = entry.getValue();
                                Map<Nutrient, Integer> nutritionMap = foods.get(food);
                                calories += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                carbs += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                proteins += grams / 100 * nutritionMap.get(Nutrient.PROTEINS);
                                fat += grams / 100 * nutritionMap.get(Nutrient.FAT);
                        }
                        if (calories < minCalories || calories > maxCalories) return false;
                        if (carbs > maxCarbs) return false;
                        if (proteins < minProteins) return false;
                        if (fat > maxFat) return false;
                        if (proteins + fat > maxProteinsAndFat) return false;
                        return true;
                }
        }
}
--------------------------------
question = 
Given the following test class:
'
package tesi.unibo.dynamic;
import static tesi.unibo.dynamic.Diet.Nutrient.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DynamicTest {
private DietFactory factory;
        @BeforeEach
        public void initFactory() {
                this.factory = new DietFactoryImpl();
        }
        private void fillProducts(Diet diet) {
                diet.addFood("pasta", Map.of(CARBS,280,PROTEINS,70,FAT,50)); // 400 calories overall
                diet.addFood("riso", Map.of(CARBS,250,PROTEINS,70,FAT,30));  // 350 calories overall
                diet.addFood("pollo", Map.of(CARBS,10,PROTEINS,60,FAT,30));  // 100 calories overall
                diet.addFood("insalata", Map.of(CARBS,10,PROTEINS,3,FAT,2)); // 15 calories overall
                diet.addFood("broccoli", Map.of(CARBS,20,PROTEINS,10,FAT,5));// 35 calories overall
                diet.addFood("grana", Map.of(CARBS,0,PROTEINS,200,FAT,200)); // 400 calories overall
        }
        @Test
        public void testStandard() {
                var diet = this.factory.standard();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)),
                "calories is 1900"); // 800+300+800 calories
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",50.0))); // 800+300+200 calories: too low!!
                assertFalse(diet.isValid(Map.of("pasta",300.0,"pollo",300.0,"grana",200.0,"broccoli",300.0))); // 1200+300+800+105 calories: too much!!
        }
        @Test
        public void testLowCarb() {
                var diet = this.factory.lowCarb();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",1000.0)),
                "calories is 1000 and carbs is 100"); // ok calories, ok carbs
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too much!
                assertFalse(diet.isValid(Map.of("pasta",400.0))); // ok calories, but too much carbs
        }
        @Test
        public void testHighProtein() {
                var diet = this.factory.highProtein();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",2500.0)),
                "calories is 2500, carbs is 250, protein is 1500"); // ok calories, ok proteins
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too few!
                assertFalse(diet.isValid(Map.of("grana",500.0))); // ok calories, but too few proteins
        }
        @Test
        public void testBalanced() {
                var diet = this.factory.balanced();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta", 200.0, "pollo", 400.0, "grana", 100.0, "broccoli", 300.0))); // OK
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)));
                assertFalse(diet.isValid(Map.of("pollo",1000.0)));
                assertFalse(diet.isValid(Map.of("pollo",2000.0)));
        }

}
'
Given the following support class:
'
package tesi.unibo.dynamic;

import java.util.Map;

/**
 * Models a diet regime, essentially with a method 'isValid' to check
 * if a selection of food is compliant with this diet
 */
public interface Diet {

        /**
         * The three standard types of nutrients
         */
        enum Nutrient {
                CARBS, PROTEINS, FAT
        }

        /**
         * Add information about a new type of food ("pasta", "pollo", and so on)
         *
         * @param name is the unique name of the food
         * @param nutritionMap gives a map from a nutrient to how many calories it brings with 100 grams of food
         * (see method Test.fillProducts for its usage
         */
        void addFood(String name, Map<Nutrient,Integer> nutritionMap);

        /**
         * Given a selection of food for a day diet, it states if this is valid in current diet.
         * Note that if 100 grams of 'pasta' give 50 calories of FAT (according to nutritionMap above),
         * then 200 grams of pasta added in dietMap brings 100 calories.
         *
         * @param dietMap, gives how many grams of each food are selected
         * @return whether this selection of food is ok in this diet
         */
        boolean isValid(Map<String, Double> dietMap);

}

'
Given the following class to implement:
'
package tesi.unibo.dynamic;

public interface DietFactory {

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1500,2000]
         * - does not care about carbs
         * - does not care about protein
         * - does not care about fat
         */
        Diet standard();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1000,1500]
         * - carbs give overall <=300 calories
         * - does not care about protein
         * - does not care about fat
         */
        Diet lowCarb();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [2000,2500]
         * - carbs give overall <=300 calories
         * - proteins give overall >=1300 calories
         * - does not care about fat
         */
        Diet highProtein();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1600,2000]
         * - carbs give overall >=600 calories
         * - proteins give overall >=600 calories
         * - fat gives overall >=400 calories
         * - fat and proteins together give overall <=1100 calories
         */
        Diet balanced();
}

'
Given your previous implementation:
'
package tesi.unibo.dynamic;

import java.util.HashMap;
import java.util.Map;

public class DietFactoryImpl implements DietFactory {

        @Override
        public Diet standard() {
                return new DietImpl(1500, 2000, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet lowCarb() {
                return new DietImpl(1000, 1500, 0, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet highProtein() {
                return new DietImpl(2000, 2500, 1300, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet balanced() {
                return new DietImpl(1600, 2000, 600, Integer.MAX_VALUE, 600, Integer.MAX_VALUE, 400, Integer.MAX_VALUE, 400, 1100);
        }

        private static class DietImpl implements Diet {
                private Map<String, Map<Nutrient, Integer>> foods;
                private int minCalories;
                private int maxCalories;
                private int minCarbs;
                private int maxCarbs;
                private int minProteins;
                private int maxProteins;
                private int minFat;
                private int maxFat;
                private int maxProteinsAndFat;

                public DietImpl(int minCalories, int maxCalories, int minCarbs, int maxCarbs,
                                                int minProteins, int maxProteins, int minFat, int maxFat,
                                                int minProteinsAndFat, int maxProteinsAndFat) {
                        this.foods = new HashMap<>();
                        this.minCalories = minCalories;
                        this.maxCalories = maxCalories;
                        this.minCarbs = minCarbs;
                        this.maxCarbs = maxCarbs;
                        this.minProteins = minProteins;
                        this.maxProteins = maxProteins;
                        this.minFat = minFat;
                        this.maxFat = maxFat;
                        this.maxProteinsAndFat = maxProteinsAndFat;
                }

                @Override
                public void addFood(String name, Map<Nutrient, Integer> nutritionMap) {
                        foods.put(name, nutritionMap);
                }

                @Override
                public boolean isValid(Map<String, Double> dietMap) {
                        int calories = 0;
                        int carbs = 0;
                        int proteins = 0;
                        int fat = 0;
                        for (var entry : dietMap.entrySet()) {
                                String food = entry.getKey();
                                double grams = entry.getValue();
                                Map<Nutrient, Integer> nutritionMap = foods.get(food);
                                calories += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                carbs += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                proteins += grams / 100 * nutritionMap.get(Nutrient.PROTEINS);
                                fat += grams / 100 * nutritionMap.get(Nutrient.FAT);
                        }
                        if (calories < minCalories || calories > maxCalories) return false;
                        if (carbs > maxCarbs) return false;
                        if (proteins < minProteins) return false;
                        if (fat > maxFat) return false;
                        if (proteins + fat > maxProteinsAndFat) return false;
                        return true;
                }
        }
}
'
Given the following tests failed by your previous implementation:
'
        - testStandard(): calories is 1900 ==> expected: <true> but was: <false>
        - testLowCarb(): calories is 1000 and carbs is 100 ==> expected: <true> but was: <false>
        - testHighProtein(): calories is 2500, carbs is 250, protein is 1500 ==> expected: <true> but was: <false>
        - testBalanced(): expected: <true> but was: <false>

'
I want you to generate a Java class named DietFactoryImpl that passes the provided tests.  The package for the class to be created is "tesi.unibo.dynamic". I WANT ONLY THE CODE, NO COMMENTS. I want runnable code with the information I've given you. I don't want examples, I just want it to work and pass the tests.
--------------------------------
response = 
package tesi.unibo.dynamic;

import java.util.HashMap;
import java.util.Map;

public class DietFactoryImpl implements DietFactory {

        @Override
        public Diet standard() {
                return new DietImpl(1500, 2000, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet lowCarb() {
                return new DietImpl(1000, 1500, 0, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet highProtein() {
                return new DietImpl(2000, 2500, 1300, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet balanced() {
                return new DietImpl(1600, 2000, 600, Integer.MAX_VALUE, 600, Integer.MAX_VALUE, 400, Integer.MAX_VALUE, 400, 1100);
        }

        private static class DietImpl implements Diet {
                private Map<String, Map<Nutrient, Integer>> foods;
                private int minCalories;
                private int maxCalories;
                private int minCarbs;
                private int maxCarbs;
                private int minProteins;
                private int maxProteins;
                private int minFat;
                private int maxFat;
                private int maxProteinsAndFat;

                public DietImpl(int minCalories, int maxCalories, int minCarbs, int maxCarbs,
                                                int minProteins, int maxProteins, int minFat, int maxFat,
                                                int minProteinsAndFat, int maxProteinsAndFat) {
                        this.foods = new HashMap<>();
                        this.minCalories = minCalories;
                        this.maxCalories = maxCalories;
                        this.minCarbs = minCarbs;
                        this.maxCarbs = maxCarbs;
                        this.minProteins = minProteins;
                        this.maxProteins = maxProteins;
                        this.minFat = minFat;
                        this.maxFat = maxFat;
                        this.maxProteinsAndFat = maxProteinsAndFat;
                }

                @Override
                public void addFood(String name, Map<Nutrient, Integer> nutritionMap) {
                        foods.put(name, nutritionMap);
                }

                @Override
                public boolean isValid(Map<String, Double> dietMap) {
                        double calories = 0;
                        double carbs = 0;
                        double proteins = 0;
                        double fat = 0;
                        for (var entry : dietMap.entrySet()) {
                                String food = entry.getKey();
                                double grams = entry.getValue();
                                Map<Nutrient, Integer> nutritionMap = foods.get(food);
                                calories += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                carbs += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                proteins += grams / 100 * nutritionMap.get(Nutrient.PROTEINS);
                                fat += grams / 100 * nutritionMap.get(Nutrient.FAT);
                        }
                        if (calories < minCalories || calories > maxCalories) return false;
                        if (carbs > maxCarbs) return false;
                        if (proteins < minProteins) return false;
                        if (fat > maxFat) return false;
                        if (proteins + fat > maxProteinsAndFat) return false;
                        return true;
                }
        }
}
--------------------------------
question = 
Given the following test class:
'
package tesi.unibo.dynamic;
import static tesi.unibo.dynamic.Diet.Nutrient.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DynamicTest {
private DietFactory factory;
        @BeforeEach
        public void initFactory() {
                this.factory = new DietFactoryImpl();
        }
        private void fillProducts(Diet diet) {
                diet.addFood("pasta", Map.of(CARBS,280,PROTEINS,70,FAT,50)); // 400 calories overall
                diet.addFood("riso", Map.of(CARBS,250,PROTEINS,70,FAT,30));  // 350 calories overall
                diet.addFood("pollo", Map.of(CARBS,10,PROTEINS,60,FAT,30));  // 100 calories overall
                diet.addFood("insalata", Map.of(CARBS,10,PROTEINS,3,FAT,2)); // 15 calories overall
                diet.addFood("broccoli", Map.of(CARBS,20,PROTEINS,10,FAT,5));// 35 calories overall
                diet.addFood("grana", Map.of(CARBS,0,PROTEINS,200,FAT,200)); // 400 calories overall
        }
        @Test
        public void testStandard() {
                var diet = this.factory.standard();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)),
                "calories is 1900"); // 800+300+800 calories
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",50.0))); // 800+300+200 calories: too low!!
                assertFalse(diet.isValid(Map.of("pasta",300.0,"pollo",300.0,"grana",200.0,"broccoli",300.0))); // 1200+300+800+105 calories: too much!!
        }
        @Test
        public void testLowCarb() {
                var diet = this.factory.lowCarb();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",1000.0)),
                "calories is 1000 and carbs is 100"); // ok calories, ok carbs
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too much!
                assertFalse(diet.isValid(Map.of("pasta",400.0))); // ok calories, but too much carbs
        }
        @Test
        public void testHighProtein() {
                var diet = this.factory.highProtein();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pollo",2500.0)),
                "calories is 2500, carbs is 250, protein is 1500"); // ok calories, ok proteins
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0))); // 800+300+800 calories, too few!
                assertFalse(diet.isValid(Map.of("grana",500.0))); // ok calories, but too few proteins
        }
        @Test
        public void testBalanced() {
                var diet = this.factory.balanced();
                this.fillProducts(diet);
                assertTrue(diet.isValid(Map.of("pasta", 200.0, "pollo", 400.0, "grana", 100.0, "broccoli", 300.0))); // OK
                assertFalse(diet.isValid(Map.of("pasta",200.0,"pollo",300.0,"grana",200.0)));
                assertFalse(diet.isValid(Map.of("pollo",1000.0)));
                assertFalse(diet.isValid(Map.of("pollo",2000.0)));
        }

}
'
Given the following support class:
'
package tesi.unibo.dynamic;

import java.util.Map;

/**
 * Models a diet regime, essentially with a method 'isValid' to check
 * if a selection of food is compliant with this diet
 */
public interface Diet {

        /**
         * The three standard types of nutrients
         */
        enum Nutrient {
                CARBS, PROTEINS, FAT
        }

        /**
         * Add information about a new type of food ("pasta", "pollo", and so on)
         *
         * @param name is the unique name of the food
         * @param nutritionMap gives a map from a nutrient to how many calories it brings with 100 grams of food
         * (see method Test.fillProducts for its usage
         */
        void addFood(String name, Map<Nutrient,Integer> nutritionMap);

        /**
         * Given a selection of food for a day diet, it states if this is valid in current diet.
         * Note that if 100 grams of 'pasta' give 50 calories of FAT (according to nutritionMap above),
         * then 200 grams of pasta added in dietMap brings 100 calories.
         *
         * @param dietMap, gives how many grams of each food are selected
         * @return whether this selection of food is ok in this diet
         */
        boolean isValid(Map<String, Double> dietMap);

}

'
Given the following class to implement:
'
package tesi.unibo.dynamic;

public interface DietFactory {

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1500,2000]
         * - does not care about carbs
         * - does not care about protein
         * - does not care about fat
         */
        Diet standard();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1000,1500]
         * - carbs give overall <=300 calories
         * - does not care about protein
         * - does not care about fat
         */
        Diet lowCarb();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [2000,2500]
         * - carbs give overall <=300 calories
         * - proteins give overall >=1300 calories
         * - does not care about fat
         */
        Diet highProtein();

        /**
         * @return a diet where a selection of food is ok if:
         * - overall calories are within range [1600,2000]
         * - carbs give overall >=600 calories
         * - proteins give overall >=600 calories
         * - fat gives overall >=400 calories
         * - fat and proteins together give overall <=1100 calories
         */
        Diet balanced();
}

'
Given your previous implementation:
'
package tesi.unibo.dynamic;

import java.util.HashMap;
import java.util.Map;

public class DietFactoryImpl implements DietFactory {

        @Override
        public Diet standard() {
                return new DietImpl(1500, 2000, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet lowCarb() {
                return new DietImpl(1000, 1500, 0, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet highProtein() {
                return new DietImpl(2000, 2500, 1300, Integer.MAX_VALUE, 0, 300, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
        }

        @Override
        public Diet balanced() {
                return new DietImpl(1600, 2000, 600, Integer.MAX_VALUE, 600, Integer.MAX_VALUE, 400, Integer.MAX_VALUE, 400, 1100);
        }

        private static class DietImpl implements Diet {
                private Map<String, Map<Nutrient, Integer>> foods;
                private int minCalories;
                private int maxCalories;
                private int minCarbs;
                private int maxCarbs;
                private int minProteins;
                private int maxProteins;
                private int minFat;
                private int maxFat;
                private int maxProteinsAndFat;

                public DietImpl(int minCalories, int maxCalories, int minCarbs, int maxCarbs,
                                                int minProteins, int maxProteins, int minFat, int maxFat,
                                                int minProteinsAndFat, int maxProteinsAndFat) {
                        this.foods = new HashMap<>();
                        this.minCalories = minCalories;
                        this.maxCalories = maxCalories;
                        this.minCarbs = minCarbs;
                        this.maxCarbs = maxCarbs;
                        this.minProteins = minProteins;
                        this.maxProteins = maxProteins;
                        this.minFat = minFat;
                        this.maxFat = maxFat;
                        this.maxProteinsAndFat = maxProteinsAndFat;
                }

                @Override
                public void addFood(String name, Map<Nutrient, Integer> nutritionMap) {
                        foods.put(name, nutritionMap);
                }

                @Override
                public boolean isValid(Map<String, Double> dietMap) {
                        double calories = 0;
                        double carbs = 0;
                        double proteins = 0;
                        double fat = 0;
                        for (var entry : dietMap.entrySet()) {
                                String food = entry.getKey();
                                double grams = entry.getValue();
                                Map<Nutrient, Integer> nutritionMap = foods.get(food);
                                calories += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                carbs += grams / 100 * nutritionMap.get(Nutrient.CARBS);
                                proteins += grams / 100 * nutritionMap.get(Nutrient.PROTEINS);
                                fat += grams / 100 * nutritionMap.get(Nutrient.FAT);
                        }
                        if (calories < minCalories || calories > maxCalories) return false;
                        if (carbs > maxCarbs) return false;
                        if (proteins < minProteins) return false;
                        if (fat > maxFat) return false;
                        if (proteins + fat > maxProteinsAndFat) return false;
                        return true;
                }
        }
}
'
Given the following tests failed by your previous implementation:
'
        - testStandard(): calories is 1900 ==> expected: <true> but was: <false>
        - testLowCarb(): calories is 1000 and carbs is 100 ==> expected: <true> but was: <false>
        - testHighProtein(): calories is 2500, carbs is 250, protein is 1500 ==> expected: <true> but was: <false>
        - testBalanced(): expected: <true> but was: <false>

'
I want you to generate a Java class named DietFactoryImpl that passes the provided tests.  The package for the class to be created is "tesi.unibo.dynamic". I WANT ONLY THE CODE, NO COMMENTS. I want runnable code with the information I've given you. I don't want examples, I just want it to work and pass the tests.